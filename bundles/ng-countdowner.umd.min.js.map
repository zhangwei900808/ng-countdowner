{"version":3,"sources":["ng://ng-countdowner/src/app/countdowner/ng-countdowner/ng-countdowner.component.ts","ng://ng-countdowner/src/app/countdowner/countdowner.module.ts"],"names":["NgCountdownerComponent","EventEmitter","prototype","ngOnInit","this","initTimer","start","Date","getTime","isNaN","startTimer","countTimer","_this","countDownDate","end","setInterval","runTimer","now","interval","seconds","Math","floor","minutes","hours","days","prependZero","clearInterval","timerExpired","emit","started","ended","expiryMessage","digit","toString","Component","args","selector","template","Input","Output","CountdownerModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"qUAAA,IAAAA,EAAA,WAkBE,SAAAA,sBARyB,IAAIC,EAAAA,cAAa,qBACjB,IAAIA,EAAAA,cAAa,UAU1CD,EAAAE,UAAAC,SAAA,WAEEC,KAAKC,aAGPL,EAAAE,UAAAG,UAAA,WACE,IAAMC,EAAQ,IAAIC,KAAKH,KAAKE,OAAOE,UAIZF,GAHH,IAAIC,MACaC,WAELC,MAAMH,GACpCF,KAAKM,aAELN,KAAKO,WAAa,6BAItBX,EAAAE,UAAAQ,WAAA,WAAA,IAAAE,EAAAR,KACEA,KAAKS,cAAgB,IAAIN,KAAKH,KAAKU,KAAKN,UACxCJ,KAAKW,YAAcA,YAAY,WAAM,OAAAH,EAAKI,YAAY,MAGxDhB,EAAAE,UAAAc,SAAA,WACE,IAAMC,GAAM,IAAIV,MAAOC,UACjBU,EAAWd,KAAKS,cAAgBI,EAChCE,EAAUC,KAAKC,MAAOH,EAAQ,IAAkB,KAChDI,EAAUF,KAAKC,MAAOH,EAAQ,KAAmB,KACjDK,EAAQH,KAAKC,MAAOH,EAAQ,MAAwB,MACpDM,EAAOJ,KAAKC,MAAMH,EAAQ,OAChCd,KAAKO,WAAaP,KAAKqB,YAAYD,GAAQ,IAAMpB,KAAKqB,YAAYF,GAAS,IAAMnB,KAAKqB,YAAYH,GAAW,IAAMlB,KAAKqB,YAAYN,GAEhID,EAAW,IACbQ,cAActB,KAAKW,aACnBX,KAAKuB,aAAaC,KAAK,CAACC,QAAWzB,KAAKE,MAAOwB,MAAS1B,KAAKU,MAClC,KAAvBV,KAAK2B,cACP3B,KAAKO,WAAa,oBAElBP,KAAKO,WAAaP,KAAK2B,gBAM7B/B,EAAAE,UAAAuB,YAAA,SAAYO,GAEV,OAAIA,EAAQ,GAEc,KADxBA,EAAQA,EAAMC,YAITD,uBArEVE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,qBACVC,SAAA,6KAICC,EAAAA,qBACAA,EAAAA,4BACAC,EAAAA,6BACAA,EAAAA,sCACAD,EAAAA,6BACAA,EAAAA,WAbH,GCAAE,EAAA,oDAGCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,CACPC,EAAAA,cAEFC,aAAc,CACZ5C,GAEF6C,QAAS,CACP7C,SAXJ","sourcesContent":["import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\n\n@Component({\n  selector: 'app-ng-countdowner',\n  templateUrl: './ng-countdowner.component.html',\n  styleUrls: ['./ng-countdowner.component.css']\n})\nexport class NgCountdownerComponent implements OnInit {\n  @Input() end: any; // end date of countdown\n  @Input() start: any; // start date of countdown\n  @Output() timerExpired = new EventEmitter(true); // emit timer expiry\n  @Output() timerStarted = new EventEmitter(true);\n  @Input() countDownTimerVisible: boolean;\n  @Input() expiryMessage: string;\n  countDownDate: any;\n  countTimer: any;\n  setInterval: any;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n\n    this.initTimer();\n  }\n\n  initTimer() {\n    const start = new Date(this.start).getTime();\n    const currentdate = new Date();\n    const currentTimeStamp = currentdate.getTime();\n\n    if (currentTimeStamp > start || isNaN(start)) { // check if timer has started\n      this.startTimer();\n    } else {\n      this.countTimer = 'The timer has not started';\n    }\n  }\n\n  startTimer() {\n    this.countDownDate = new Date(this.end).getTime(); // end date formatted\n    this.setInterval = setInterval(() => this.runTimer(), 1000);\n  }\n\n  runTimer() {\n    const now = new Date().getTime(); // Getting current timestamp\n    const interval = this.countDownDate - now; // Difference between current timestamp and end timestamp\n    const seconds = Math.floor((interval % (1000 * 60)) / 1000); // calculating seconds\n    const minutes = Math.floor((interval % (1000 * 60 * 60)) / (1000 * 60)); // calculating minutes\n    const hours = Math.floor((interval % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); // calculating hours\n    const days = Math.floor(interval / (1000 * 60 * 60 * 24)); // calculating days\n    this.countTimer = this.prependZero(days) + ':' + this.prependZero(hours) + ':' + this.prependZero(minutes) + ':' + this.prependZero(seconds);\n// Emitting timer-end event\n    if (interval < 0) {\n      clearInterval(this.setInterval);\n      this.timerExpired.emit({'started': this.start, 'ended': this.end});\n      if (this.expiryMessage === ''){\n        this.countTimer = 'Timer has expired';\n      } else {\n        this.countTimer = this.expiryMessage;\n      }\n\n    }\n  }\n\n  prependZero(digit) {\n\n    if (digit < 10) {\n      digit = digit.toString();\n      const formattedNumber = '0' + digit;\n      return formattedNumber;\n    }\n    return digit;\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgCountdownerComponent } from './ng-countdowner/ng-countdowner.component';\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgCountdownerComponent\n  ],\n  exports: [\n    NgCountdownerComponent\n  ]\n})\nexport class CountdownerModule { }\n"]}