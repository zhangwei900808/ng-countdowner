!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common")):"function"==typeof define&&define.amd?define("ng-countdowner",["exports","@angular/core","@angular/common"],t):t(e["ng-countdowner"]={},e.ng.core,e.ng.common)}(this,function(e,t,r){"use strict";var n=function(){function e(){this.timerExpired=new t.EventEmitter(!0),this.timerStarted=new t.EventEmitter(!0)}return e.prototype.ngOnInit=function(){this.initTimer()},e.prototype.initTimer=function(){var e=new Date(this.start).getTime();e<(new Date).getTime()||isNaN(e)?this.startTimer():this.countTimer="The timer has not started"},e.prototype.startTimer=function(){var e=this;this.countDownDate=new Date(this.end).getTime(),this.setInterval=setInterval(function(){return e.runTimer()},1e3)},e.prototype.runTimer=function(){var e=(new Date).getTime(),t=this.countDownDate-e,r=Math.floor(t%6e4/1e3),n=Math.floor(t%36e5/6e4),o=Math.floor(t%864e5/36e5),i=Math.floor(t/864e5);this.countTimer=this.prependZero(i)+":"+this.prependZero(o)+":"+this.prependZero(n)+":"+this.prependZero(r),t<0&&(clearInterval(this.setInterval),this.timerExpired.emit({started:this.start,ended:this.end}),""===this.expiryMessage?this.countTimer="Timer has expired":this.countTimer=this.expiryMessage)},e.prototype.prependZero=function(e){return e<10?"0"+(e=e.toString()):e},e.decorators=[{type:t.Component,args:[{selector:"app-ng-countdowner",template:'<p class="countdown-timer" *ngIf="countDownTimerVisible !== false">{{countTimer}}</p>\n',styles:[""]}]}],e.ctorParameters=function(){return[]},e.propDecorators={end:[{type:t.Input}],start:[{type:t.Input}],timerExpired:[{type:t.Output}],timerStarted:[{type:t.Output}],countDownTimerVisible:[{type:t.Input}],expiryMessage:[{type:t.Input}]},e}(),o=function(){function e(){}return e.decorators=[{type:t.NgModule,args:[{imports:[r.CommonModule],declarations:[n],exports:[n]}]}],e}();e.CountdownerModule=o,e.Éµa=n,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ng-countdowner.umd.min.js.map